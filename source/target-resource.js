'use strict';
/**
 * @exports TargetResource
 */
/**
 * @ignore
 */
var TargetResource = (function() {
  /**
   * @class TargetResource
   * @classdesc Instance of TargetResource represents resource that is ready to send to other environment. They are generated when target value added to ResourcePool via `set()` method.
   * @param {DataAccessInterface.ResourcePool} pool Resource pool where resource target was registered
   * @param {*} resource Resource target value, should be value of acceptable type
   * @param {string} resourceType Resource target type string, custom or generated by typeof() operator
   * @param {string} id Resource Id string
   * @see DataAccessInterface.ResourcePool#set
   */
  function TargetResource(_pool, _resource, resourceType, _id) {
    Object.defineProperty(this, TARGET_INTERNALS, { // private read-only property
      value: {
        active: true,
        pool: _pool,
        poolId: _pool ? _pool.id : null,
        resource: _resource,
        type: resourceType,
        id: _id
      }
    });
    Object.defineProperty(this, TARGET_DATA, {
      get: get_TARGET_DATA
    });

    Object.defineProperties(this, {
      /**
       * TRUE while resource is available in ResourcePool, after TargetResource is destroyed, its `active` property changes to FALSE.
       * @member {boolean} TargetResource#active
       */
      active: {
        get: get_active
      },
      /**
       * Id of ResourcePool where target value is stored.
       * @member {string} TargetResource#poolId
       * @see DataAccessInterface.ResourcePool
       */
      poolId: {
        get: get_poolId
      },
      /**
       * Target resource value that was stored in ResourcePool
       * @member {*} TargetResource#resource
       */
      resource: {
        get: get_resource
      },
      /**
       * Resource value type, it may be custom string or result of typeof() operator.
       * @member {string} TargetResource#type
       */
      type: {
        get: get_type
      },
      /**
       * Resource Id, unique identifier, generated for each target value stored in ResourcePool. TargetResource instance can be requested from pool via Id.
       * @member {string} TargetResource#id
       */
      id: {
        get: get_id
      }
    });
  }

  function get_TARGET_DATA() {
    return this.toJSON();
  }

  function get_active() {
    return Boolean(this[TARGET_INTERNALS].active);
  }

  function get_poolId() {
    return this[TARGET_INTERNALS].poolId;
  }

  function get_resource() {
    return this[TARGET_INTERNALS].resource;
  }

  function get_type() {
    return this[TARGET_INTERNALS].type || typeof(this[TARGET_INTERNALS].resource);
  }

  function get_id() {
    return this[TARGET_INTERNALS].id;
  }

  /**
   * @method TargetResource#toJSON
   * @returns {RAWResource}
   */
  function _toJSON() {
    var data = {};
    data[TARGET_DATA] = {
      id: this[TARGET_INTERNALS].id,
      type: this.type,
      poolId: this.poolId
    };
    return data;
  }

  /**
   * Remove target value from its ResourcePool and destroy TargetResource. After its destroyed, it cannot be used anywhere, all its values will be cleared.
   * @method TargetResource#destroy
   * @returns {void}
   */
  function _destroy() {
    var id = this[TARGET_INTERNALS].id;
    var pool = this[TARGET_INTERNALS].pool;

    if (!this[TARGET_INTERNALS].active) {
      return;
    }
    this[TARGET_INTERNALS].active = false;

    pool.remove(id);

    for (var name in this[TARGET_INTERNALS]) {
      delete this[TARGET_INTERNALS][name];
    }
  }

  TargetResource.prototype.toJSON = _toJSON;
  TargetResource.prototype.destroy = _destroy;

  /**
   * @method TargetResource.create
   * @param {DataAccessInterface.ResourcePool} pool
   * @param {*} resource
   * @param {string} resourceType
   * @param {string} [id]
   * @returns {TargetResource}
   */
  function TargetResource_create(pool, resource, resourceType, id) {
    return new TargetResource(pool, resource, resourceType, id || getId());
  }

  TargetResource.create = TargetResource_create;

  return TargetResource;
})();
